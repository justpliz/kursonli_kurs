<div class="mx-auto w-full bg-dblue">
  <div class="max-w-1440 flex justify-between items-center mx-auto h-20">
    <a href="/"><img src="/images/white-line-logo.svg" alt=""></a>

    <div class="relative w-1/5">
      <input class="input_search table_search_input" type="text" placeholder="" id="index-table-search-row"
        onkeyup="filterSearch()">
      <div class="absolute inset-y-0 right-4 flex items-center pl-3 pointer-events-none">
        <img src="/images/icons/search.svg" alt="">
      </div>
    </div>

    <a href="/worker/login" class="href_index">Войти</a>
  </div>
</div>


<div class="max-w-1440 mx-auto">
  <div class="flex py-8 ">
    <%= for item <- @city_list do %>
      <a class="font-bold pr-4" href="city?name=<%= item.name %>">
        <%= item.name %> (<span class="font-bold text-red-500"><%= item.count %></span>)
      </a>
      <% end %>
  </div>

  <div class="font-black text-black text-2xl pb-4">
    Курсы валют в обменных пунктах в городе <%= @name %> на <span class="text-3xl">
        <%= KursonliKursWeb.GeneralHelper.date_to_string_data(Timex.now) %>
      </span>
  </div>

  <!-- как хочет любовь -->

  <div class="courses" data-item="<%= PwHelper.Normalize.repo(@currency_list) |> Jason.encode!()  %>">

  </div>
  <div class="relative w-full pt-10">
    <table class="w-full text-sm text-left text-gray-500 table-fixed table_search" id="index-table">
      <thead class="bg-tableGray text-white uppercase">
        <tr class="uppercase">
          <th scope="col" class="w-1/4 px-6 py-4 border-l-2 border-tableGray whitespace-nowrap">
            ОБМЕННЫЙ ПУНКТ
          </th>
          <th scope="col" class="w-1/6 px-6 py-4 border-2 border-gray-200">
            Время
          </th>
          <th scope="col" class="w-1/6 px-6 py-4 border-2 border-gray-200">
            <select class="select_table" data-select="1">
              <%= for item <- @currency_list do %>
                <option value="<%= item.short_name %>">
                  <%= item.short_name %>
                </option>
                <% end %>
            </select>
          </th>
          <th scope="col" class="w-1/6 px-6 py-4 border-2 border-gray-200">
            <select class="select_table" data-select="2">
              <%= for item <- @currency_list do %>
                <option value="<%= item.short_name %>">
                  <%= item.short_name %>
                </option>
                <% end %>
            </select>
          </th>
          <th scope="col" class="w-1/6 px-6 py-4 border-2 border-gray-200">
            <select class="select_table" data-select="3">
              <%= for item <- @currency_list do %>
                <option value="<%= item.short_name %>">
                  <%= item.short_name %>
                </option>
                <% end %>
            </select>
          </th>
          <th scope="col" class="w-1/6 px-6 py-4 border-r-2 border-tableGray">
            контакты
          </th>
        </tr>
      </thead>
      <tbody>
        <%= for item <- @courses_list do %>
          <tr class="bg-white text-black" data-id="<%= item.filial.id %>"
            data-item="<%= PwHelper.Normalize.repo(item) |> Jason.encode!() %>">
            <td class="px-6 py-4 border-2 border-tableGray">
              <a href="personal?filial=<%= item.filial.id %>">
                <%= item.filial.name %>
              </a>
              <div class="hidden">
                <%= [gold, wholesale_rate]=item.setting.tags %>
              </div>
              <div class="">
                <%= if String.to_atom(gold) do %>
                  <span class="bg-yellow-500 rounded px-2">Золото</span>
                <% end %>
                <%= if String.to_atom(wholesale_rate) do %>
                  <span class="bg-green-600 rounded px-2">Оптовый курс</span>
                <% end %>
              </div>
            </td>
            <td class="px-6 py-4 border-2 border-tableGray">
              <%= KursonliKursWeb.GeneralHelper.date_to_string_time(item.filial.course |> hd() |> Map.get(:date)) %>
            </td>
            <td class="px-6 py-4 border-2 border-tableGray dataget" data-select="1">
              <span class="sale">
                <%= item.filial.course |> hd |> Map.get(:value_for_sale) %>
              </span>
              <span class="pushare">
                <%= item.filial.course |> hd |> Map.get(:value_for_purchase) %>
              </span>
            </td>
            <td class="px-6 py-4 border-2 border-tableGray dataget"  data-select="2">
              <span class="sale">
                <%= item.filial.course |> hd |> Map.get(:value_for_sale) %>
              </span>
              <span class="pushare">
                <%= item.filial.course |> hd |> Map.get(:value_for_purchase) %>
              </span>
            </td>
            <td class="px-6 py-4 border-2 border-tableGray dataget"  data-select="3">
                <span class="sale">
                  <%= item.filial.course |> hd |> Map.get(:value_for_sale) %>
                </span>
                <span class="pushare">
                  <%= item.filial.course |> hd |> Map.get(:value_for_purchase) %>
                </span>
            </td>
            <td class="px-6 py-4 border-2 border-tableGray">
              <a class="block hover:underline" href='tel:<%= item.setting.phones["phone1"] %>'>
                <%= item.setting.phones["phone1"] %>
              </a>
              <a class="block hover:underline" href='tel:<%= item.setting.phones["phone2"] %>'>
                <%= item.setting.phones["phone2"] %>
              </a>
              <a class="block hover:underline" href='tel:<%= item.setting.phones["phone3"] %>'>
                <%= item.setting.phones["phone3"] %>
              </a>
            </td>
          </tr>
          <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const elements = [...document.querySelectorAll("[data-id]")]
    let courses = JSON.parse(document.querySelector(".courses").dataset.item).map(el => el.short_name)
    const selectTable = [...document.querySelectorAll(".select_table")]

    selectTable.forEach((el) => el.addEventListener('change', (e) => {
      const currentSelect = e.currentTarget.dataset.select
      const valueEl = e.currentTarget.value

      elements.forEach((value, index) => {
        const elemGiveData = value.querySelector(`.dataget[data-select="${currentSelect}"]`)
        const elemFindSale = elemGiveData.querySelector(`.sale`)
        const elemFindPushare = elemGiveData.querySelector(`.pushare`)
        const item = JSON.parse(value.dataset.item)

        const find = item.filial.course.find((el) => {
          return el.currency.short_name
            == valueEl
        })
        if (find != undefined) {
          elemFindSale.innerHTML = find.value_for_sale
          elemFindPushare.innerHTML = find.value_for_purchase
        }
        else {
          elemFindSale.innerHTML = "-"
          elemFindPushare.innerHTML = "-"
        }
      })
    }));

    const getSort = ({ target }) => {
      const order = (target.dataset.order = -(target.dataset.order || -1));
      const index = [...target.parentNode.cells].indexOf(target);
      const collator = new Intl.Collator({ numeric: true });
      const comparator = (index, order) => (a, b) => order * collator.compare(
        a.children[index].innerHTML,
        b.children[index].innerHTML
      );

      for (const tBody of target.closest('table').tBodies)
        tBody.append(...[...tBody.rows].sort(comparator(index, order)));

      for (const cell of target.parentNode.cells)
        cell.classList.toggle('sorted', cell === target);

    };
    document.querySelectorAll('.table_sort .sorted_tr').forEach(tableTH => tableTH.addEventListener('click', () => getSort(event)));
  });

  function filterSearch() {
    var phrase = document.getElementsByClassName('table_search_input');
    var table = document.getElementsByClassName('table_search');
    var regPhrase = new RegExp(phrase[0].value, 'i');
    var flag = false;
    for (var i = 1; i < table[0].rows.length; i++) {
      flag = false;
      for (var j = table[0].rows[i].cells.length - 1; j >= 0; j--) {
        flag = regPhrase.test(table[0].rows[i].cells[j].innerHTML);
        if (flag) break;
      }
      if (flag) {
        table[0].rows[i].style.display = "";
      } else {
        table[0].rows[i].style.display = "none";
      }
    }
  }
</script>